
import java_cup.runtime.*;
import java.util.*;

parser code {:
    /* this part is included in the parser class */
    public static void main (String args[]) throws Exception{
        new parser(new Lexer(System.in)).parse();
    }
:}

/* Terminals (tokens returned by the scanner). */
terminal SYSOUT,LALA,LOLO,IF,WHILE,FOR,TYPE,MODIF,CLASS,ST,CH,NM,DO,LP,RP,AA,MM,PP,GE,NE,LE,EQ,LO,LN,LS,RS,LC,RC,AO,PO,MO,MB,DB,SM,COMMA,LT,RT,LA,KW,ID,UNDEFINED;


/* Non-terminals */
nonterminal Boolean program, statement, class_decl, class_body_decls, class_body_decl;
nonterminal Boolean type_args, type_arg;
nonterminal Boolean block, block_statements, block_statement;

nonterminal Boolean semi_column_statement, if_block, while_block, for_block;
nonterminal Boolean left_hand_side, expression;
nonterminal Boolean type_cast, initiate, array;
nonterminal Boolean operation, operations, operator, atom;
nonterminal Boolean object;




/* The grammar */

program ::= CLASS ID class_decl
              {:RESULT = true;:}
              | error 
              {:RESULT = false;:};


class_decl  ::= LC class_body_decls RC;
class_body_decls ::= class_body_decl
              | class_body_decls class_body_decl;

class_body_decl ::= MODIF MODIF TYPE ID LP type_args RP block;


type_arg ::= TYPE ID;
type_args ::= type_arg | type_args COMMA type_arg;

block ::= LC block_statements RC | LC RC;
block_statement ::= semi_column_statement SM | if_block | while_block | for_block;
block_statements ::= block_statement | block_statements block_statement;

left_hand_side ::= TYPE AA ID | TYPE ID | ID;
semi_column_statement ::= left_hand_side AO expression | SYSOUT LP atom RP;

if_block ::= IF LP expression RP block;
while_block ::= WHILE LP expression RP block;
for_block ::= FOR LP expression RP block;
expression ::= type_cast | initiate | array | operations;

type_cast ::= LP TYPE RP operation;
initiate ::= AA; //TODO 
array ::= LS RS; //TODO
operator ::= PO | MO | MB | DB | LALA | LOLO; /* lala and lolo are && || */

operation ::= atom;
operations ::= operations operator operation | operation;

atom ::= MO object | LN object | object; // - or !
object ::= ID | NM | ST | CH;

